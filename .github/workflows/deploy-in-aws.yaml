name: Deploy Flask App to EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Clean target directory on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.EC2_USER }}/mceutik || mkdir -p /home/${{ secrets.EC2_USER }}/mceutik
            cd /home/${{ secrets.EC2_USER }}/mceutik
            sudo rm -rf static/ templates/ 2>/dev/null || rm -rf static/ templates/
            rm -f main.py wsgi.py requirements.txt
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/mceutik
            mkdir -p static templates instance
            chmod 755 /home/${{ secrets.EC2_USER }}
            chmod 755 /home/${{ secrets.EC2_USER }}/mceutik
            chmod -R 755 /home/${{ secrets.EC2_USER }}/mceutik/static
            chmod -R 755 /home/${{ secrets.EC2_USER }}/mceutik/templates
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "main.py,wsgi.py,requirements.txt,static/*,templates/*"
          target: /home/${{ secrets.EC2_USER }}/mceutik/
      - name: Create .env file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.EC2_USER }}/mceutik
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
            echo "MAIL_USE_TLS=${{ secrets.MAIL_USE_TLS }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "MAIL_DEFAULT_SENDER=${{ secrets.MAIL_DEFAULT_SENDER }}" >> .env
            chmod 600 .env
      - name: Deploy Flask App
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.EC2_USER }}/mceutik
            mkdir -p instance
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            if [ ! -f /etc/systemd/system/mceutik.service ]; then
              sudo bash -c 'cat <<EOF > /etc/systemd/system/mceutik.service
[Unit]
Description=Mceutik Flask app
After=network.target
[Service]
User=${{ secrets.EC2_USER }}
Group=${{ secrets.EC2_USER }}
WorkingDirectory=/home/${{ secrets.EC2_USER }}/mceutik
Environment="PYTHONPATH=/home/${{ secrets.EC2_USER }}/mceutik"
ExecStart=/home/${{ secrets.EC2_USER }}/mceutik/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:5000 wsgi:application
Restart=always
[Install]
WantedBy=multi-user.target
EOF'
              sudo systemctl daemon-reload
              sudo systemctl enable mceutik
            fi
            sudo systemctl restart mceutik
            chmod 755 /home/${{ secrets.EC2_USER }}
            chmod 755 /home/${{ secrets.EC2_USER }}/mceutik
            chmod -R 755 /home/${{ secrets.EC2_USER }}/mceutik/static
      - name: Install NGINX and Certbot
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            if ! command -v nginx &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y nginx
            fi
            if ! command -v certbot &> /dev/null; then
              sudo apt-get install -y certbot python3-certbot-nginx
            fi
      - name: Check for SSL Certificates
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            MCEUTIK_CERT_EXISTS=false
            AGCM_CERT_EXISTS=false
            if [ -d "/etc/letsencrypt/live/mceutik.ma" ]; then
              MCEUTIK_CERT_EXISTS=true
              echo "✓ Certificate for mceutik.ma exists"
            else
              echo "Attempting to obtain certificate for mceutik.ma..."
              sudo certbot --nginx -d mceutik.ma -d www.mceutik.ma --non-interactive --agree-tos --email ${{ secrets.SSL_EMAIL }} --redirect || exit 1
            fi
            if [ -d "/etc/letsencrypt/live/agcm.mceutik.ma" ]; then
              AGCM_CERT_EXISTS=true
              echo "✓ Certificate for agcm.mceutik.ma exists"
            else
              echo "Attempting to obtain certificate for agcm.mceutik.ma..."
              sudo certbot --nginx -d agcm.mceutik.ma --non-interactive --agree-tos --email ${{ secrets.SSL_EMAIL }} --redirect || exit 1
            fi
      - name: Configure NGINX with HTTPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo tee /etc/nginx/sites-available/master-proxy > /dev/null <<'EOF'
# Flask App - mceutik.ma
server {
    listen 80;
    server_name mceutik.ma www.mceutik.ma;
    return 301 https://mceutik.ma$request_uri;
}
server {
    listen 443 ssl http2;
    server_name mceutik.ma www.mceutik.ma;
    ssl_certificate /etc/letsencrypt/live/mceutik.ma/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mceutik.ma/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /static/ {
        alias /home/${{ secrets.EC2_USER }}/mceutik/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}
# Django App - agcm.mceutik.ma
server {
    listen 80;
    server_name agcm.mceutik.ma;
    return 301 https://agcm.mceutik.ma$request_uri;
}
server {
    listen 443 ssl http2;
    server_name agcm.mceutik.ma;
    ssl_certificate /etc/letsencrypt/live/agcm.mceutik.ma/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/agcm.mceutik.ma/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF
            sudo ln -sf /etc/nginx/sites-available/master-proxy /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl enable nginx
            sudo systemctl reload nginx || sudo systemctl restart nginx
            echo "✓ NGINX configured with HTTPS"
      - name: Set up Auto-Renewal
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            if [ ! -f /etc/cron.d/certbot-renew ]; then
              sudo bash -c 'cat <<CRON_EOF > /etc/cron.d/certbot-renew
# Renew certificates twice daily and reload nginx
0 3,15 * * * root certbot renew --quiet --nginx --post-hook "systemctl reload nginx"
CRON_EOF'
              echo "✓ Auto-renewal cron job created"
            fi
      - name: Deployment Summary
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo ""
            echo "=========================================="
            echo " DEPLOYMENT COMPLETE! ✓"
            echo "=========================================="
            echo ""
            echo "Flask App Status:"
            sudo systemctl status mceutik --no-pager -l | head -10
            echo ""
            echo "NGINX Status:"
            sudo systemctl status nginx --no-pager -l | head -10
            echo ""
            echo "SSL Certificates:"
            sudo certbot certificates 2>/dev/null || echo "No certificates yet"
            echo ""
            echo "Docker Containers:"
            if [ -d "/home/${{ secrets.EC2_USER }}/dealtoboost" ]; then
              cd /home/${{ secrets.EC2_USER }}/dealtoboost && sudo docker compose ps
            else
              echo "Django app not yet deployed"
            fi
            echo ""
            echo "=========================================="